<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Logger Class</title><meta name="Title" content="Logger" /><meta name="Help.Id" content="T:Logging.Helper.Logger" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Logging.Helper" /><meta name="guid" content="T_Logging_Helper_Logger" /><meta name="Description" content="Class that provides common logging properties and methods." /><meta name="tocFile" content="../toc/IDCA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">NuGet Packages Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Logger Class</h1><div class="summary">Class that provides common logging properties and methods.</div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="N_Logging_Helper.htm">Logging.Helper</a><br /><strong>Assembly:</strong> Logging.Helper (in Logging.Helper.dll) Version: 1.0.2<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="identifier">Logger</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">Logger</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Remarks</h2><div id="IDBCSection"><p>These are the different types of log message that can be used:</p><table class="table is-hoverable"><tr><th>Type</th><th>Description</th></tr><tr><td>Fatal</td><td>Use to log non-recoverable exceptions that
            unexpectedly end the process.</td></tr><tr><td>Error</td><td>Use to log exceptions that have been handled but caused
            the processing to stop.</td></tr><tr><td>Warning</td><td>Use to indicate that the process faced a potential problem
            but can continue.</td></tr><tr><td>Information</td><td>These are purely informational messages; they <i>should not</i>
            be used to indicate a fault or error state.</td></tr><tr><td>Debug</td><td>Used to indicate that the logged message can be used for
            debugging purposes to help find the solution to tricky bugs.</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDCCSection">
             In the program that requires logging functionality:
             <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-C#">using Logging.Helper;
public class Program
{
  /// <summary>Public static Logger.</summary>
  // Logging configuration in the application settings (App.config)...
  public static readonly Logger Logging = new Logger( typeof( Program ) );

  // ... OR shared logging configuration filename specified in the application settings...
  public static readonly Logger Logging = new Logger( Properties.Settings.Default.LogConfig );

  // ... OR shared logging configuration filename hard-coded in each program...
  public static readonly Logger Logging = new Logger( MethodBase.GetCurrentMethod().DeclaringType, "Sample.log4net" );

  static void Main( string[] args )
  {
    try
    {
      Logging.Log( "Test specified message type.", LogSeverity.Warning );
    }
    catch( Exception ex )
    {
      // Handle any unexpected exceptions
      Logging.Fatal( ex.ToString() );
    }
    finally
    {
      // Set the program exit code based on whether any errors have been logged
      Environment.ExitCode = Logging.HasErrors ? 1 : 0;
    }
    Environment.Exit( Environment.ExitCode );
  }
}</code></pre></div></div><br />To allow a processing class to log using the logger created in the program it must inherit
             from the Logging.Helper.LoggerEvent class and have the event handler set after it has been instantiated:
             <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-C#">using Logging.Helper;
public class ProcessingClass : LoggerEvent
{
  internal int DoProcessing()
  {
    var retValue = 0; // Assume normal completion
    try
    {
      // This method is inherited from the LoggerEvent class
      RaiseLogEvent( "Information message about the processing..." );
    }
    catch( Exception ex )
    {
      RaiseLogEvent( ex.ToString(), LogSeverity.Fatal );
      retValue = 1; // Abnormal completion
    }
    return retValue;
  }
}

using Logging.Helper;
public class Program
{
  /// <summary>Public static Logger.</summary>
  public static readonly Logger Logging = new Logger( typeof( Program ) );

  static void Main( string[] args )
  {
    try
    {
      // Create an object from a class that inherits LoggerEvent
      var logicClass = new ProcessingClass();
      logicClass.RaiseLogHandler += Logging.OnRaiseLog;

      // Do Processing and set the Exit code
      logicClass.DoProcessing();
    }
    catch( Exception ex )
    {
      // Handle any unexpected exceptions
      Logging.Fatal( ex.ToString() );
    }
    finally
    {
      // Set the program exit code based on whether any errors have been logged
      Environment.ExitCode = Logging.HasErrors ? 1 : 0;
    }
    Environment.Exit( Environment.ExitCode );
  }
}</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="IDABEASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="M_Logging_Helper_Logger__ctor.htm">Logger(String)</a></td><td>
            Initializes a new instance of the Logger class using an optional configuration file name.
            </td></tr><tr><td><a href="M_Logging_Helper_Logger__ctor_1.htm">Logger(Type, String)</a></td><td>
            Initializes a new instance of the Logger class using a logger type and configuration file name.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDMEASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="P_Logging_Helper_Logger_ConfigFile.htm">ConfigFile</a></td><td>Gets the logging configuration file name.</td></tr><tr><td><a href="P_Logging_Helper_Logger_ErrorCount.htm">ErrorCount</a></td><td>Gets the count of error messages logged.</td></tr><tr><td><a href="P_Logging_Helper_Logger_FatalCount.htm">FatalCount</a></td><td>Gets the count of fatal messages logged.</td></tr><tr><td><a href="P_Logging_Helper_Logger_HasErrors.htm">HasErrors</a></td><td>Indicates whether errors exists.</td></tr><tr><td><a href="P_Logging_Helper_Logger_MaxLogFiles.htm">MaxLogFiles</a></td><td>Gets or sets the maximum number of log files to keep.</td></tr><tr><td><a href="P_Logging_Helper_Logger_WarnCount.htm">WarnCount</a></td><td>Gets the count of warning messages logged.</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDGEASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="M_Logging_Helper_Logger_Debug.htm">Debug(String)</a></td><td>Logs a debugging message.</td></tr><tr><td><a href="M_Logging_Helper_Logger_Debug_1.htm">Debug(String, <span id="LST537EB24F_0" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LST537EB24F_1" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Logs a debugging message with arguments.</td></tr><tr><td><a href="M_Logging_Helper_Logger_Error.htm">Error(Exception)</a></td><td>Logs an exception.</td></tr><tr><td><a href="M_Logging_Helper_Logger_Error_1.htm">Error(String)</a></td><td>Logs an error message.</td></tr><tr><td><a href="M_Logging_Helper_Logger_Error_2.htm">Error(String, Exception)</a></td><td>Logs an error message with an exception.</td></tr><tr><td><a href="M_Logging_Helper_Logger_Error_3.htm">Error(String, <span id="LST537EB24F_2" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LST537EB24F_3" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Logs an error message with arguments.</td></tr><tr><td><a href="M_Logging_Helper_Logger_Fatal.htm">Fatal(Exception)</a></td><td>Logs a fatal exception.</td></tr><tr><td><a href="M_Logging_Helper_Logger_Fatal_1.htm">Fatal(String)</a></td><td>Logs a fatal error message.</td></tr><tr><td><a href="M_Logging_Helper_Logger_Fatal_2.htm">Fatal(String, <span id="LST537EB24F_4" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LST537EB24F_5" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Logs a fatal error message with arguments.</td></tr><tr><td><a href="M_Logging_Helper_Logger_Info.htm">Info(String)</a></td><td>Logs an informational message.</td></tr><tr><td><a href="M_Logging_Helper_Logger_Info_1.htm">Info(String, <span id="LST537EB24F_6" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LST537EB24F_7" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Logs an informational message with arguments.</td></tr><tr><td><a href="M_Logging_Helper_Logger_Log.htm">Log</a></td><td>Log a message.</td></tr><tr><td><a href="M_Logging_Helper_Logger_OnRaiseLog.htm">OnRaiseLog</a></td><td>Event handler for the logging process.</td></tr><tr><td><a href="M_Logging_Helper_Logger_RemoveLogs.htm">RemoveLogs</a></td><td>Removes the oldest non-read-only log files in a directory.</td></tr><tr><td><a href="M_Logging_Helper_Logger_SetLogFile.htm">SetLogFile</a></td><td>Sets the location of the log file and optionally, the log file name.</td></tr><tr><td><a href="M_Logging_Helper_Logger_ToString.htm">ToString</a></td><td>Converts the value of this instance to a string.<br />(Overrides <a href="https://docs.microsoft.com/dotnet/api/system.object.tostring#System_Object_ToString" target="_blank" rel="noopener noreferrer">Object<span id="LST537EB24F_8" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ToString<span id="LST537EB24F_9" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><a href="M_Logging_Helper_Logger_Warn.htm">Warn(String)</a></td><td>Logs a warning message.</td></tr><tr><td><a href="M_Logging_Helper_Logger_Warn_1.htm">Warn(String, <span id="LST537EB24F_10" data-languageSpecificText="cpp=array&lt;"></span>Object<span id="LST537EB24F_11" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>)</a></td><td>Logs a warning message with arguments.</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Fields</h2><div id="IDAEASection"><table id="FieldList" class="table is-hoverable"><tr><td><a href="F_Logging_Helper_Logger_cExtension.htm">cExtension</a></td><td>Log file extension (suffix) including the period.</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="N_Logging_Helper.htm">Logging.Helper Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Remarks</a></li><li><a class="quickLink">Example</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Fields</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>